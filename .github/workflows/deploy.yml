name: Deploy to GCP VM

on:
  pull_request:
    branches:
      - main       # Deploy to production only

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      # ===============================================
      # 1. PR√âPARATION
      # ===============================================
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      # ===============================================
      # 2. TESTS ET BUILD
      # ===============================================
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
        continue-on-error: true
      
      - name: Build TypeScript
        run: npm run build
      
      # ===============================================
      # 3. CONFIGURATION ENVIRONNEMENT (PRODUCTION UNIQUEMENT)
      # ===============================================
      - name: Set environment variables
        run: |
          # Nom du service depuis le repository
          SERVICE_NAME="ptk-products-api"
          echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_ENV
          echo "DATE_TAG=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          
          # Toujours en production maintenant
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "CONTAINER_SUFFIX=prod" >> $GITHUB_ENV
          
          echo "üîç Service: $SERVICE_NAME"
          echo "üåç Environment: production"
      
      # ===============================================
      # 4. BUILD ET PUSH DOCKER IMAGE
      # ===============================================
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      - name: Build and push Docker image
        run: |
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}"
          
          # Tags pour versioning (production uniquement)
          TAG_PROD="production"
          TAG_SHA="production-${{ env.SHORT_SHA }}"
          TAG_DATE="production-${{ env.DATE_TAG }}"
          TAG_LATEST="production-latest"
          
          echo "üê≥ Building image: $IMAGE_NAME"
          echo "üè∑Ô∏è Tags: $TAG_PROD, $TAG_SHA, $TAG_DATE, $TAG_LATEST"
          
          # Build l'image
          docker build -t $IMAGE_NAME:$TAG_PROD .
          
          # Ajouter tous les tags
          docker tag $IMAGE_NAME:$TAG_PROD $IMAGE_NAME:$TAG_SHA
          docker tag $IMAGE_NAME:$TAG_PROD $IMAGE_NAME:$TAG_DATE
          docker tag $IMAGE_NAME:$TAG_PROD $IMAGE_NAME:$TAG_LATEST
          
          # Push tous les tags
          docker push $IMAGE_NAME:$TAG_PROD
          docker push $IMAGE_NAME:$TAG_SHA
          docker push $IMAGE_NAME:$TAG_DATE
          docker push $IMAGE_NAME:$TAG_LATEST
          
          echo "‚úÖ Image pushed: $IMAGE_NAME:$TAG_PROD"
      
      # ===============================================
      # 5. AUTHENTIFICATION GCP
      # ===============================================
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      
      # ===============================================
      # 6. D√âPLOIEMENT SUR VM GCP (PRODUCTION)
      # ===============================================
      - name: Deploy to GCP VM Production
        run: |
          # Cr√©er le script de d√©ploiement
          cat > deploy-script.sh << 'EOF'
          #!/bin/bash
          set -e
          
          SERVICE_NAME="${{ env.SERVICE_NAME }}"
          CONTAINER_SUFFIX="prod"
          DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
          IMAGE_TAG="production-${{ env.SHORT_SHA }}"
          
          echo "üöÄ Deploying $SERVICE_NAME to PRODUCTION"
          echo "üì¶ Image: $DOCKER_USERNAME/$SERVICE_NAME:$IMAGE_TAG"
          
          # Aller dans le r√©pertoire du projet
          cd /opt/payetonkawa
          
          # Pull de la nouvelle image
          echo "‚¨áÔ∏è Pulling new image..."
          sudo docker pull $DOCKER_USERNAME/$SERVICE_NAME:$IMAGE_TAG
          
          # Tag comme production pour docker-compose
          sudo docker tag $DOCKER_USERNAME/$SERVICE_NAME:$IMAGE_TAG $DOCKER_USERNAME/$SERVICE_NAME:production
          
          # Identifier le service √† red√©marrer
          COMPOSE_SERVICE="products-api-prod"
          
          echo "üîÑ Restarting service: $COMPOSE_SERVICE"
          
          # Mettre √† jour le .env avec la nouvelle image
          sudo sed -i "s|DOCKER_REGISTRY=.*|DOCKER_REGISTRY=$DOCKER_USERNAME|g" .env
          
          # Arr√™ter et supprimer le container existant
          sudo docker-compose stop $COMPOSE_SERVICE || true
          sudo docker-compose rm -f $COMPOSE_SERVICE || true
          
          # Red√©marrer avec la nouvelle image
          sudo docker-compose up -d $COMPOSE_SERVICE
          
          # Attendre que le service soit pr√™t
          echo "‚è≥ Waiting for service to be ready..."
          sleep 30
          
          # Health check sur le port de production
          HEALTH_PORT="4003"
          
          echo "üè• Health check on port $HEALTH_PORT"
          
          # Tenter le health check (plusieurs essais)
          for i in {1..5}; do
            if curl -f http://localhost:$HEALTH_PORT/health 2>/dev/null; then
              echo "‚úÖ Service $COMPOSE_SERVICE is healthy!"
              break
            elif [ $i -eq 5 ]; then
              echo "‚ö†Ô∏è Health check failed, but service might still be starting"
              echo "üìã Container status:"
              sudo docker ps | grep $COMPOSE_SERVICE || echo "Container not found"
              sudo docker-compose logs --tail=20 $COMPOSE_SERVICE || echo "No logs available"
            else
              echo "‚è≥ Attempt $i/5 failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
          
          # Nettoyer les anciennes images (garder les 5 derni√®res)
          echo "üßπ Cleaning old images..."
          sudo docker images $DOCKER_USERNAME/$SERVICE_NAME --format "table {{.Tag}}\t{{.CreatedAt}}" | grep -v TAG | sort -k2 -r | tail -n +6 | awk '{print "'$DOCKER_USERNAME'/'$SERVICE_NAME':"$1}' | xargs -r sudo docker rmi || true
          
          echo "üéâ Production deployment completed!"
          EOF
          
          # Rendre le script ex√©cutable
          chmod +x deploy-script.sh
          
          # Copier et ex√©cuter sur la VM via gcloud
          echo "üì° Connecting to VM ${{ secrets.GCP_VM_NAME }}..."
          
          # Copier le script sur la VM
          gcloud compute scp deploy-script.sh ${{ secrets.GCP_VM_NAME }}:/tmp/ \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }}
          
          # Ex√©cuter le script sur la VM
          gcloud compute ssh ${{ secrets.GCP_VM_NAME }} \
            --zone=${{ secrets.GCP_ZONE }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --command="chmod +x /tmp/deploy-script.sh && /tmp/deploy-script.sh"
      
      # ===============================================
      # 7. NOTIFICATIONS
      # ===============================================
      - name: Production deployment success
        if: success()
        run: |
          echo "üéâ Production deployment successful!"
          echo "üì¶ Service: ${{ env.SERVICE_NAME }}"
          echo "üåç Environment: PRODUCTION"
          echo "üè∑Ô∏è Image: ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:production-${{ env.SHORT_SHA }}"
          echo "üîó API URL: http://${{ secrets.VM_EXTERNAL_IP }}:4003/health"
      
      - name: Production deployment failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          echo "üì¶ Service: ${{ env.SERVICE_NAME }}"
          echo "üåç Environment: PRODUCTION"
          echo "üîó Check logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"